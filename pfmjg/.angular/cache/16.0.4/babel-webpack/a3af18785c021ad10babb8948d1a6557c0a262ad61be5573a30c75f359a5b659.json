{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet EditarCategoriaComponent = class EditarCategoriaComponent {\n  constructor(serviceCategoria, rotaAtiva, rota, el, toastr) {\n    this.serviceCategoria = serviceCategoria;\n    this.rotaAtiva = rotaAtiva;\n    this.rota = rota;\n    this.el = el;\n    this.toastr = toastr;\n    this.sucessMessage = \"\";\n    this.exibirMensagem = false;\n    this.cpfValido = false;\n    this.categoriaId = 0;\n    this.categoria = {\n      idCategoria: 0,\n      descricao: '',\n      tipoCategoria: ''\n    };\n  }\n  ngOnInit() {\n    this.rotaAtiva.params.subscribe(params => {\n      this.categoriaId = +params['id'];\n      console.log('ID do Paciente:', this.categoriaId);\n      this.carregarDetalhesPaciente();\n    });\n  }\n  updCategoria(form) {\n    const idCategoria = this.categoria.idCategoria;\n    console.log(form.value);\n    // Verifique se o objeto paciente está definido e se o formulário é válido\n    if (this.categoria && this.categoriaForm.valid && idCategoria !== undefined) {\n      // Preencha os valores do objeto paciente com os valores do formulário\n      this.categoria.descricao = this.categoriaForm.value.descricao;\n      this.categoria.tipoCategoria = this.categoriaForm.value.tipoCategoria;\n      this.serviceCategoria.atualizarCategoria(idCategoria, this.paciente).subscribe(() => {\n        this.sucessMessage = \"Paciente Salvo!\";\n        this.exibirMensagem = true;\n        setTimeout(() => {\n          this.toastr.success(this.sucessMessage, 'Sucesso');\n          this.rota.navigate(['pacientes']);\n        }, 2000);\n      });\n    } else {\n      console.log('Paciente não definido ou formulário inválido');\n    }\n  }\n  carregarDetalhesPaciente() {\n    this.servicePaciente.getIdPaciente(this.pacienteId).subscribe(paciente => {\n      console.log('Dados do paciente obtidos:', paciente);\n      this.paciente = paciente;\n      console.log('Valores do paciente após atribuição:');\n      console.log('ID do Paciente:', this.paciente.idPaciente);\n      console.log('Nome do Paciente:', this.paciente.nomePaciente);\n      console.log('Data de nascimento do Paciente:', this.paciente.dataNascimentoPaciente);\n      console.log('Idade do Paciente:', this.paciente.idadePaciente);\n      console.log('Cidade do Paciente:', this.paciente.cidade);\n      console.log('Estado do Paciente:', this.paciente.estado);\n    }, error => {\n      console.log('Erro ao obter os dados do paciente:', error);\n    });\n  }\n  calcularIdade() {\n    if (this.paciente.dataNascimentoPaciente) {\n      const hoje = new Date();\n      const dataNascimento = new Date(this.paciente.dataNascimentoPaciente);\n      const diff = Math.abs(hoje.getTime() - dataNascimento.getTime());\n      this.paciente.idadePaciente = Math.floor(diff / (1000 * 60 * 60 * 24 * 365.25)); // Calcula a idade em anos considerando anos bissextos\n    }\n  }\n\n  formatarCPF() {\n    if (this.paciente.cpf) {\n      // Remove todos os caracteres não numéricos\n      this.paciente.cpf = this.paciente.cpf.replace(/\\D/g, '');\n      // Aplica a formatação XXX.XXX.XXX-XX\n      if (this.paciente.cpf.length > 3) {\n        this.paciente.cpf = this.paciente.cpf.substring(0, 3) + '.' + this.paciente.cpf.substring(3);\n      }\n      if (this.paciente.cpf.length > 7) {\n        this.paciente.cpf = this.paciente.cpf.substring(0, 7) + '.' + this.paciente.cpf.substring(7);\n      }\n      if (this.paciente.cpf.length > 11) {\n        this.paciente.cpf = this.paciente.cpf.substring(0, 11) + '-' + this.paciente.cpf.substring(11);\n      }\n    }\n  }\n  validarCPF() {\n    if (!this.paciente.cpf) {\n      this.cpfValido = false; // Se cpf estiver indefinido, não é válido\n      return;\n    }\n    const cpf_vald = this.paciente.cpf?.replace(/\\D/g, ''); // Remove caracteres não numéricos\n    if (cpf_vald.length !== 11 || !this.validarCPFDigitos(cpf_vald)) {\n      this.cpfValido = false;\n    } else {\n      this.cpfValido = true;\n    }\n  }\n  validarCPFDigitos(cpf) {\n    // Remove caracteres não numéricos\n    cpf = cpf.replace(/\\D/g, '');\n    // Verifica se o CPF possui 11 dígitos\n    if (cpf.length !== 11) {\n      return false;\n    }\n    // Calcula o primeiro dígito verificador\n    let sum = 0;\n    for (let i = 0; i < 9; i++) {\n      sum += parseInt(cpf.charAt(i)) * (10 - i);\n    }\n    const firstDigit = 11 - sum % 11;\n    const firstDigitMatch = (firstDigit >= 10 ? 0 : firstDigit) === parseInt(cpf.charAt(9));\n    if (!firstDigitMatch) {\n      return false;\n    }\n    // Calcula o segundo dígito verificador\n    sum = 0;\n    for (let i = 0; i < 10; i++) {\n      sum += parseInt(cpf.charAt(i)) * (11 - i);\n    }\n    const secondDigit = 11 - sum % 11;\n    const secondDigitMatch = (secondDigit >= 10 ? 0 : secondDigit) === parseInt(cpf.charAt(10));\n    if (!secondDigitMatch) {\n      return false;\n    }\n    return true; // CPF é válido\n  }\n\n  formatarTelefone() {\n    if (this.paciente.telefone) {\n      const telefone = this.paciente.telefone;\n      const telefoneNumerico = telefone.replace(/\\D/g, '');\n      if (telefoneNumerico.length === 11) {\n        this.paciente.telefone = `(${telefoneNumerico.substring(0, 2)}) ${telefoneNumerico.substring(2, 7)}-${telefoneNumerico.substring(7)}`;\n      }\n    }\n  }\n  voltarPagina() {\n    this.rota.navigate(['pacientes']);\n  }\n  onInput() {\n    const input = this.el.nativeElement;\n    if (input.value < 0) {\n      input.value = '';\n    }\n  }\n};\n__decorate([ViewChild('categoriaForm')], EditarCategoriaComponent.prototype, \"categoriaForm\", void 0);\n__decorate([HostListener('input')], EditarCategoriaComponent.prototype, \"onInput\", null);\nEditarCategoriaComponent = __decorate([Component({\n  selector: 'app-editar-categoria',\n  templateUrl: './editar-categoria.component.html',\n  styleUrls: ['./editar-categoria.component.scss']\n})], EditarCategoriaComponent);\nexport { EditarCategoriaComponent };","map":{"version":3,"names":["Component","EditarCategoriaComponent","constructor","serviceCategoria","rotaAtiva","rota","el","toastr","sucessMessage","exibirMensagem","cpfValido","categoriaId","categoria","idCategoria","descricao","tipoCategoria","ngOnInit","params","subscribe","console","log","carregarDetalhesPaciente","updCategoria","form","value","categoriaForm","valid","undefined","atualizarCategoria","paciente","setTimeout","success","navigate","servicePaciente","getIdPaciente","pacienteId","idPaciente","nomePaciente","dataNascimentoPaciente","idadePaciente","cidade","estado","error","calcularIdade","hoje","Date","dataNascimento","diff","Math","abs","getTime","floor","formatarCPF","cpf","replace","length","substring","validarCPF","cpf_vald","validarCPFDigitos","sum","i","parseInt","charAt","firstDigit","firstDigitMatch","secondDigit","secondDigitMatch","formatarTelefone","telefone","telefoneNumerico","voltarPagina","onInput","input","nativeElement","__decorate","ViewChild","HostListener","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\welli\\front_pfmjg\\pfmjg\\src\\app\\module\\pages\\categoria\\editar-categoria\\editar-categoria.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Categoria } from 'src/app/models/categoria/categoria';\nimport { CategoriaService } from 'src/app/services/service-categoria.service';\n\n@Component({\n  selector: 'app-editar-categoria',\n  templateUrl: './editar-categoria.component.html',\n  styleUrls: ['./editar-categoria.component.scss']\n})\nexport class EditarCategoriaComponent {\n  @ViewChild('categoriaForm') categoriaForm!: NgForm;\n\n  sucessMessage: string = \"\";\n\n  exibirMensagem: boolean = false;\n\n  cpfValido: boolean = false;\n\n\n  categoriaId: number = 0;\n\n  categoria: Categoria = {\n    idCategoria: 0,\n    descricao: '',\n    tipoCategoria: '',\n  };\n  \n  constructor(private serviceCategoria: CategoriaService, private rotaAtiva: ActivatedRoute,\n    private rota: Router, private el: ElementRef, private toastr: ToastrService) {\n\n  }\n\n  ngOnInit() : void {\n    this.rotaAtiva.params.subscribe(params => {\n      this.categoriaId = +params['id'];\n      console.log('ID do Paciente:', this.categoriaId);\n      this.carregarDetalhesPaciente();\n    })\n  }\n  \n\n  updCategoria(form: NgForm): void {\n    const idCategoria = this.categoria.idCategoria;\n    console.log(form.value)\n    // Verifique se o objeto paciente está definido e se o formulário é válido\n    if (this.categoria && this.categoriaForm.valid && idCategoria !== undefined) {\n      // Preencha os valores do objeto paciente com os valores do formulário\n\n      this.categoria.descricao = this.categoriaForm.value.descricao as string;\n      this.categoria.tipoCategoria = this.categoriaForm.value.tipoCategoria as string;\n  \n      this.serviceCategoria.atualizarCategoria(idCategoria, this.paciente).subscribe(() => {\n        this.sucessMessage = \"Paciente Salvo!\";\n        this.exibirMensagem = true;\n        setTimeout(() => {\n          this.toastr.success(this.sucessMessage, 'Sucesso');\n          this.rota.navigate(['pacientes']);\n        }, 2000)\n\n      });\n      \n    } else {\n      console.log('Paciente não definido ou formulário inválido');\n    }\n  }\n  \n  \n    carregarDetalhesPaciente() {\n      this.servicePaciente.getIdPaciente(this.pacienteId).subscribe(\n        paciente => {\n          console.log('Dados do paciente obtidos:', paciente);\n          this.paciente = paciente;\n          \n          console.log('Valores do paciente após atribuição:');\n          console.log('ID do Paciente:', this.paciente.idPaciente);\n          console.log('Nome do Paciente:', this.paciente.nomePaciente);\n          console.log('Data de nascimento do Paciente:', this.paciente.dataNascimentoPaciente);\n          console.log('Idade do Paciente:', this.paciente.idadePaciente);\n          console.log('Cidade do Paciente:', this.paciente.cidade);\n          console.log('Estado do Paciente:', this.paciente.estado);\n\n        },\n        error => {\n          console.log('Erro ao obter os dados do paciente:', error);\n        }\n      );\n}\n\n  calcularIdade() {\n    if (this.paciente.dataNascimentoPaciente) {\n      const hoje = new Date();\n      const dataNascimento = new Date(this.paciente.dataNascimentoPaciente);\n      const diff = Math.abs(hoje.getTime() - dataNascimento.getTime());\n      this.paciente.idadePaciente = Math.floor(diff / (1000 * 60 * 60 * 24 * 365.25)); // Calcula a idade em anos considerando anos bissextos\n  }\n}\n\nformatarCPF() {\n  if (this.paciente.cpf) {\n    // Remove todos os caracteres não numéricos\n    this.paciente.cpf = this.paciente.cpf.replace(/\\D/g, '');\n\n    // Aplica a formatação XXX.XXX.XXX-XX\n    if (this.paciente.cpf.length > 3) {\n      this.paciente.cpf =\n        this.paciente.cpf.substring(0, 3) +\n        '.' +\n        this.paciente.cpf.substring(3);\n    }\n    if (this.paciente.cpf.length > 7) {\n      this.paciente.cpf =\n        this.paciente.cpf.substring(0, 7) +\n        '.' +\n        this.paciente.cpf.substring(7);\n    }\n    if (this.paciente.cpf.length > 11) {\n      this.paciente.cpf =\n        this.paciente.cpf.substring(0, 11) +\n        '-' +\n        this.paciente.cpf.substring(11);\n    }\n  }\n}\n\n\nvalidarCPF() {\n  if (!this.paciente.cpf) {\n    this.cpfValido = false; // Se cpf estiver indefinido, não é válido\n    return;\n  }\n  \n  const cpf_vald = this.paciente.cpf?.replace(/\\D/g, ''); // Remove caracteres não numéricos\n\n  if (cpf_vald.length !== 11 || !this.validarCPFDigitos(cpf_vald)) {\n    this.cpfValido = false;\n  } else {\n    this.cpfValido = true;\n  }\n}\n\nvalidarCPFDigitos(cpf: string): boolean {\n    // Remove caracteres não numéricos\n    cpf = cpf.replace(/\\D/g, '');\n  \n    // Verifica se o CPF possui 11 dígitos\n    if (cpf.length !== 11) {\n      return false;\n    }\n  \n    // Calcula o primeiro dígito verificador\n    let sum = 0;\n    for (let i = 0; i < 9; i++) {\n      sum += parseInt(cpf.charAt(i)) * (10 - i);\n    }\n    const firstDigit = 11 - (sum % 11);\n    const firstDigitMatch = (firstDigit >= 10 ? 0 : firstDigit) === parseInt(cpf.charAt(9));\n    if (!firstDigitMatch) {\n      return false;\n    }\n  \n    // Calcula o segundo dígito verificador\n    sum = 0;\n    for (let i = 0; i < 10; i++) {\n      sum += parseInt(cpf.charAt(i)) * (11 - i);\n    }\n    const secondDigit = 11 - (sum % 11);\n    const secondDigitMatch = (secondDigit >= 10 ? 0 : secondDigit) === parseInt(cpf.charAt(10));\n    if (!secondDigitMatch) {\n      return false;\n    }\n  \n    return true; // CPF é válido\n  }\n\nformatarTelefone(): void {\n  if (this.paciente.telefone) {\n    const telefone = this.paciente.telefone;\n    const telefoneNumerico = telefone.replace(/\\D/g, '');\n    if (telefoneNumerico.length === 11) {\n      this.paciente.telefone = `(${telefoneNumerico.substring(0, 2)}) ${telefoneNumerico.substring(2, 7)}-${telefoneNumerico.substring(7)}`;\n    }\n  }\n}\n\nvoltarPagina(): void {\n  this.rota.navigate(['pacientes'])\n}\n\n@HostListener('input')\nonInput() {\n  const input = this.el.nativeElement;\n  if (input.value < 0) {\n    input.value = '';\n  }\n}\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAWzC,IAAaC,wBAAwB,GAArC,MAAaA,wBAAwB;EAkBnCC,YAAoBC,gBAAkC,EAAUC,SAAyB,EAC/EC,IAAY,EAAUC,EAAc,EAAUC,MAAqB;IADzD,KAAAJ,gBAAgB,GAAhBA,gBAAgB;IAA4B,KAAAC,SAAS,GAATA,SAAS;IAC/D,KAAAC,IAAI,GAAJA,IAAI;IAAkB,KAAAC,EAAE,GAAFA,EAAE;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAhB9D,KAAAC,aAAa,GAAW,EAAE;IAE1B,KAAAC,cAAc,GAAY,KAAK;IAE/B,KAAAC,SAAS,GAAY,KAAK;IAG1B,KAAAC,WAAW,GAAW,CAAC;IAEvB,KAAAC,SAAS,GAAc;MACrBC,WAAW,EAAE,CAAC;MACdC,SAAS,EAAE,EAAE;MACbC,aAAa,EAAE;KAChB;EAKD;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACZ,SAAS,CAACa,MAAM,CAACC,SAAS,CAACD,MAAM,IAAG;MACvC,IAAI,CAACN,WAAW,GAAG,CAACM,MAAM,CAAC,IAAI,CAAC;MAChCE,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAACT,WAAW,CAAC;MAChD,IAAI,CAACU,wBAAwB,EAAE;IACjC,CAAC,CAAC;EACJ;EAGAC,YAAYA,CAACC,IAAY;IACvB,MAAMV,WAAW,GAAG,IAAI,CAACD,SAAS,CAACC,WAAW;IAC9CM,OAAO,CAACC,GAAG,CAACG,IAAI,CAACC,KAAK,CAAC;IACvB;IACA,IAAI,IAAI,CAACZ,SAAS,IAAI,IAAI,CAACa,aAAa,CAACC,KAAK,IAAIb,WAAW,KAAKc,SAAS,EAAE;MAC3E;MAEA,IAAI,CAACf,SAAS,CAACE,SAAS,GAAG,IAAI,CAACW,aAAa,CAACD,KAAK,CAACV,SAAmB;MACvE,IAAI,CAACF,SAAS,CAACG,aAAa,GAAG,IAAI,CAACU,aAAa,CAACD,KAAK,CAACT,aAAuB;MAE/E,IAAI,CAACZ,gBAAgB,CAACyB,kBAAkB,CAACf,WAAW,EAAE,IAAI,CAACgB,QAAQ,CAAC,CAACX,SAAS,CAAC,MAAK;QAClF,IAAI,CAACV,aAAa,GAAG,iBAAiB;QACtC,IAAI,CAACC,cAAc,GAAG,IAAI;QAC1BqB,UAAU,CAAC,MAAK;UACd,IAAI,CAACvB,MAAM,CAACwB,OAAO,CAAC,IAAI,CAACvB,aAAa,EAAE,SAAS,CAAC;UAClD,IAAI,CAACH,IAAI,CAAC2B,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;QACnC,CAAC,EAAE,IAAI,CAAC;MAEV,CAAC,CAAC;KAEH,MAAM;MACLb,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;;EAE/D;EAGEC,wBAAwBA,CAAA;IACtB,IAAI,CAACY,eAAe,CAACC,aAAa,CAAC,IAAI,CAACC,UAAU,CAAC,CAACjB,SAAS,CAC3DW,QAAQ,IAAG;MACTV,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAES,QAAQ,CAAC;MACnD,IAAI,CAACA,QAAQ,GAAGA,QAAQ;MAExBV,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnDD,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAACS,QAAQ,CAACO,UAAU,CAAC;MACxDjB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAACS,QAAQ,CAACQ,YAAY,CAAC;MAC5DlB,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE,IAAI,CAACS,QAAQ,CAACS,sBAAsB,CAAC;MACpFnB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAACS,QAAQ,CAACU,aAAa,CAAC;MAC9DpB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAACS,QAAQ,CAACW,MAAM,CAAC;MACxDrB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAACS,QAAQ,CAACY,MAAM,CAAC;IAE1D,CAAC,EACDC,KAAK,IAAG;MACNvB,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEsB,KAAK,CAAC;IAC3D,CAAC,CACF;EACP;EAEEC,aAAaA,CAAA;IACX,IAAI,IAAI,CAACd,QAAQ,CAACS,sBAAsB,EAAE;MACxC,MAAMM,IAAI,GAAG,IAAIC,IAAI,EAAE;MACvB,MAAMC,cAAc,GAAG,IAAID,IAAI,CAAC,IAAI,CAAChB,QAAQ,CAACS,sBAAsB,CAAC;MACrE,MAAMS,IAAI,GAAGC,IAAI,CAACC,GAAG,CAACL,IAAI,CAACM,OAAO,EAAE,GAAGJ,cAAc,CAACI,OAAO,EAAE,CAAC;MAChE,IAAI,CAACrB,QAAQ,CAACU,aAAa,GAAGS,IAAI,CAACG,KAAK,CAACJ,IAAI,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEvF;;EAEAK,WAAWA,CAAA;IACT,IAAI,IAAI,CAACvB,QAAQ,CAACwB,GAAG,EAAE;MACrB;MACA,IAAI,CAACxB,QAAQ,CAACwB,GAAG,GAAG,IAAI,CAACxB,QAAQ,CAACwB,GAAG,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;MAExD;MACA,IAAI,IAAI,CAACzB,QAAQ,CAACwB,GAAG,CAACE,MAAM,GAAG,CAAC,EAAE;QAChC,IAAI,CAAC1B,QAAQ,CAACwB,GAAG,GACf,IAAI,CAACxB,QAAQ,CAACwB,GAAG,CAACG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GACjC,GAAG,GACH,IAAI,CAAC3B,QAAQ,CAACwB,GAAG,CAACG,SAAS,CAAC,CAAC,CAAC;;MAElC,IAAI,IAAI,CAAC3B,QAAQ,CAACwB,GAAG,CAACE,MAAM,GAAG,CAAC,EAAE;QAChC,IAAI,CAAC1B,QAAQ,CAACwB,GAAG,GACf,IAAI,CAACxB,QAAQ,CAACwB,GAAG,CAACG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GACjC,GAAG,GACH,IAAI,CAAC3B,QAAQ,CAACwB,GAAG,CAACG,SAAS,CAAC,CAAC,CAAC;;MAElC,IAAI,IAAI,CAAC3B,QAAQ,CAACwB,GAAG,CAACE,MAAM,GAAG,EAAE,EAAE;QACjC,IAAI,CAAC1B,QAAQ,CAACwB,GAAG,GACf,IAAI,CAACxB,QAAQ,CAACwB,GAAG,CAACG,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAClC,GAAG,GACH,IAAI,CAAC3B,QAAQ,CAACwB,GAAG,CAACG,SAAS,CAAC,EAAE,CAAC;;;EAGvC;EAGAC,UAAUA,CAAA;IACR,IAAI,CAAC,IAAI,CAAC5B,QAAQ,CAACwB,GAAG,EAAE;MACtB,IAAI,CAAC3C,SAAS,GAAG,KAAK,CAAC,CAAC;MACxB;;IAGF,MAAMgD,QAAQ,GAAG,IAAI,CAAC7B,QAAQ,CAACwB,GAAG,EAAEC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;IAExD,IAAII,QAAQ,CAACH,MAAM,KAAK,EAAE,IAAI,CAAC,IAAI,CAACI,iBAAiB,CAACD,QAAQ,CAAC,EAAE;MAC/D,IAAI,CAAChD,SAAS,GAAG,KAAK;KACvB,MAAM;MACL,IAAI,CAACA,SAAS,GAAG,IAAI;;EAEzB;EAEAiD,iBAAiBA,CAACN,GAAW;IACzB;IACAA,GAAG,GAAGA,GAAG,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAE5B;IACA,IAAID,GAAG,CAACE,MAAM,KAAK,EAAE,EAAE;MACrB,OAAO,KAAK;;IAGd;IACA,IAAIK,GAAG,GAAG,CAAC;IACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BD,GAAG,IAAIE,QAAQ,CAACT,GAAG,CAACU,MAAM,CAACF,CAAC,CAAC,CAAC,IAAI,EAAE,GAAGA,CAAC,CAAC;;IAE3C,MAAMG,UAAU,GAAG,EAAE,GAAIJ,GAAG,GAAG,EAAG;IAClC,MAAMK,eAAe,GAAG,CAACD,UAAU,IAAI,EAAE,GAAG,CAAC,GAAGA,UAAU,MAAMF,QAAQ,CAACT,GAAG,CAACU,MAAM,CAAC,CAAC,CAAC,CAAC;IACvF,IAAI,CAACE,eAAe,EAAE;MACpB,OAAO,KAAK;;IAGd;IACAL,GAAG,GAAG,CAAC;IACP,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3BD,GAAG,IAAIE,QAAQ,CAACT,GAAG,CAACU,MAAM,CAACF,CAAC,CAAC,CAAC,IAAI,EAAE,GAAGA,CAAC,CAAC;;IAE3C,MAAMK,WAAW,GAAG,EAAE,GAAIN,GAAG,GAAG,EAAG;IACnC,MAAMO,gBAAgB,GAAG,CAACD,WAAW,IAAI,EAAE,GAAG,CAAC,GAAGA,WAAW,MAAMJ,QAAQ,CAACT,GAAG,CAACU,MAAM,CAAC,EAAE,CAAC,CAAC;IAC3F,IAAI,CAACI,gBAAgB,EAAE;MACrB,OAAO,KAAK;;IAGd,OAAO,IAAI,CAAC,CAAC;EACf;;EAEFC,gBAAgBA,CAAA;IACd,IAAI,IAAI,CAACvC,QAAQ,CAACwC,QAAQ,EAAE;MAC1B,MAAMA,QAAQ,GAAG,IAAI,CAACxC,QAAQ,CAACwC,QAAQ;MACvC,MAAMC,gBAAgB,GAAGD,QAAQ,CAACf,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;MACpD,IAAIgB,gBAAgB,CAACf,MAAM,KAAK,EAAE,EAAE;QAClC,IAAI,CAAC1B,QAAQ,CAACwC,QAAQ,GAAG,IAAIC,gBAAgB,CAACd,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAKc,gBAAgB,CAACd,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,IAAIc,gBAAgB,CAACd,SAAS,CAAC,CAAC,CAAC,EAAE;;;EAG3I;EAEAe,YAAYA,CAAA;IACV,IAAI,CAAClE,IAAI,CAAC2B,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;EACnC;EAGAwC,OAAOA,CAAA;IACL,MAAMC,KAAK,GAAG,IAAI,CAACnE,EAAE,CAACoE,aAAa;IACnC,IAAID,KAAK,CAACjD,KAAK,GAAG,CAAC,EAAE;MACnBiD,KAAK,CAACjD,KAAK,GAAG,EAAE;;EAEpB;CACC;AAzL6BmD,UAAA,EAA3BC,SAAS,CAAC,eAAe,CAAC,C,8DAAwB;AAmLrDD,UAAA,EADCE,YAAY,CAAC,OAAO,CAAC,C,sDAMrB;AAzLY5E,wBAAwB,GAAA0E,UAAA,EALpC3E,SAAS,CAAC;EACT8E,QAAQ,EAAE,sBAAsB;EAChCC,WAAW,EAAE,mCAAmC;EAChDC,SAAS,EAAE,CAAC,mCAAmC;CAChD,CAAC,C,EACW/E,wBAAwB,CA0LpC;SA1LYA,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}