{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Paciente } from 'src/app/models/paciente';\nlet CadastrarControleCaixaComponent = class CadastrarControleCaixaComponent {\n  constructor(serviceConsulta, rotaAtiva, rota, toastr, pacienteService, serviceAgendamento) {\n    this.serviceConsulta = serviceConsulta;\n    this.rotaAtiva = rotaAtiva;\n    this.rota = rota;\n    this.toastr = toastr;\n    this.pacienteService = pacienteService;\n    this.serviceAgendamento = serviceAgendamento;\n    this.sucessMessage = \"\";\n    this.exibirMensagem = false;\n    this.agendamentos = [];\n    this.formasDePagamento = [\"Dinheiro\", \"Cartão de Crédito\", \"Cartão de Débito\", \"PIX\"];\n    this.pacientes = [];\n    this.consulatId = 0;\n    this.selectedAgendamentoId = 0;\n    this.selectedPatientId = '';\n    this.tiposDeConsulta = ['Presencial', 'Online'];\n    this.consulta = {\n      idConsulta: 0,\n      paciente: new Paciente(),\n      agendamento: 0,\n      dataConsultaAtual: new Date(),\n      tipoConsulta: '',\n      formaPagamento: ''\n    };\n    this.paciente = {\n      idPaciente: undefined,\n      cpf: '',\n      nomePaciente: '',\n      dataNascimentoPaciente: new Date(),\n      idadePaciente: 0,\n      cidade: '',\n      estado: '',\n      telefone: ''\n    };\n    this.agenda = {\n      idAgendamento: 0,\n      paciente: new Paciente(),\n      dataInicio: new Date(),\n      descricao: '',\n      horarioInicio: new Date(),\n      horaFinal: new Date(),\n      observacao: ''\n    };\n  }\n  ngOnInit() {\n    this.rotaAtiva.params.subscribe(params => {\n      this.consulatId = +params['id'];\n    });\n    this.listarPacientes();\n    this.listarAgendamentos();\n    console.log(this.agendamentos);\n  }\n  listarPacientes() {\n    this.pacienteService.getPaciente().subscribe(pacientes => {\n      this.pacientes = pacientes;\n    });\n  }\n  listarAgendamentos() {\n    this.serviceAgendamento.getAgendamento().subscribe(agenda => {\n      this.agendamentos = agenda;\n    });\n    console.log(this.agendamentos);\n  }\n  buscarDetalhesDoAgendamento() {\n    console.log(this.agendamentos);\n    if (this.selectedAgendamentoId) {\n      this.serviceAgendamento.getIdAgendamento(this.selectedAgendamentoId).subscribe(agendamento => {\n        if (agendamento) {\n          this.agenda = agendamento;\n          if (agendamento.paciente && agendamento.paciente.cpf) {\n            this.buscarDetalhesDoPaciente(agendamento.paciente.cpf);\n          } else {\n            // Lide com a situação em que o paciente não está definido ou não possui um CPF\n          }\n        }\n      });\n    }\n  }\n  addConsulta(form) {\n    console.log(this.exibirMensagem);\n    console.log(this.consulta.idConsulta);\n    console.log(this.consulta);\n    if (form.valid) {\n      this.serviceConsulta.cadastrarConsulta(this.consulta).subscribe(response => {\n        this.sucessMessage = \"Consulta Cadastrado!\";\n        this.exibirMensagem = true;\n        console.log(response);\n        console.log(this.consulta);\n        console.log(this.exibirMensagem);\n        setTimeout(() => {\n          this.toastr.success(this.sucessMessage, 'Sucesso');\n          this.rota.navigate(['consultas']);\n        }, 2000);\n      });\n    } else {\n      console.log();\n    }\n  }\n  buscarDetalhesDoPaciente(cpf) {\n    console.log(this.pacienteService.getPacientePorCPF(cpf));\n    this.pacienteService.getPacientePorCPF(cpf).subscribe(paciente => {\n      if (paciente) {\n        this.paciente.idPaciente = paciente.idPaciente;\n        this.paciente.cpf = paciente.cpf;\n        this.paciente.nomePaciente = paciente.nomePaciente;\n        this.paciente.dataNascimentoPaciente = paciente.dataNascimentoPaciente;\n        this.paciente.idadePaciente = paciente.idadePaciente;\n        this.paciente.cidade = paciente.cidade;\n        this.paciente.estado = paciente.estado;\n        this.paciente.telefone = paciente.telefone;\n        this.agenda.paciente = paciente;\n        console.log(this.agenda);\n        this.selectedPatientId = cpf;\n        this.consulta.paciente = paciente; // Você pode atribuir diretamente o objeto paciente à agenda.\n      }\n    });\n  }\n\n  voltarPagina() {\n    this.rota.navigate(['consultas']);\n  }\n};\n__decorate([ViewChild('consultaForm')], CadastrarControleCaixaComponent.prototype, \"consultaForm\", void 0);\nCadastrarControleCaixaComponent = __decorate([Component({\n  selector: 'app-cadastrar-controle-caixa',\n  templateUrl: './cadastrar-controle-caixa.component.html',\n  styleUrls: ['./cadastrar-controle-caixa.component.scss']\n})], CadastrarControleCaixaComponent);\nexport { CadastrarControleCaixaComponent };","map":{"version":3,"names":["Component","Paciente","CadastrarControleCaixaComponent","constructor","serviceConsulta","rotaAtiva","rota","toastr","pacienteService","serviceAgendamento","sucessMessage","exibirMensagem","agendamentos","formasDePagamento","pacientes","consulatId","selectedAgendamentoId","selectedPatientId","tiposDeConsulta","consulta","idConsulta","paciente","agendamento","dataConsultaAtual","Date","tipoConsulta","formaPagamento","idPaciente","undefined","cpf","nomePaciente","dataNascimentoPaciente","idadePaciente","cidade","estado","telefone","agenda","idAgendamento","dataInicio","descricao","horarioInicio","horaFinal","observacao","ngOnInit","params","subscribe","listarPacientes","listarAgendamentos","console","log","getPaciente","getAgendamento","buscarDetalhesDoAgendamento","getIdAgendamento","buscarDetalhesDoPaciente","addConsulta","form","valid","cadastrarConsulta","response","setTimeout","success","navigate","getPacientePorCPF","voltarPagina","__decorate","ViewChild","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\welli\\front_pfmjg\\pfmjg\\src\\app\\module\\pages\\controle-caixa\\cadastrar-controle-caixa\\cadastrar-controle-caixa.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { FormControl, NgForm, Validators } from '@angular/forms';\nimport { Agendamento } from 'src/app/models/agendamento/agendamento';\nimport { Consulta } from 'src/app/models/consulta/consulta';\nimport { Paciente } from 'src/app/models/paciente';\nimport { ServiceAgendamento } from 'src/app/services/service-agendamento.service';\nimport { ServiceConsulta } from 'src/app/services/service-consulta.service';\nimport { ServicePaciente } from 'src/app/services/service-paciente.service';\n\n@Component({\n  selector: 'app-cadastrar-controle-caixa',\n  templateUrl: './cadastrar-controle-caixa.component.html',\n  styleUrls: ['./cadastrar-controle-caixa.component.scss']\n})\nexport class CadastrarControleCaixaComponent {\n\n  @ViewChild('consultaForm') consultaForm!: NgForm;\n\n  sucessMessage: string = \"\";\n\n  exibirMensagem: boolean = false;\n\n  agendamentos: Agendamento[] = [];\n\n  formasDePagamento: string[] = [\"Dinheiro\", \"Cartão de Crédito\", \"Cartão de Débito\", \"PIX\"];\n\n  pacientes: Paciente[] = [];\n\n  consulatId: number = 0;\n\n  selectedAgendamentoId: number = 0;\n\n  selectedPatientId: string = '';\n\n  tiposDeConsulta: string[] = ['Presencial', 'Online'];\n\n  consulta: Consulta = {\n    idConsulta: 0,\n    paciente: new Paciente,\n    agendamento: 0,\n    dataConsultaAtual: new Date(),\n    tipoConsulta: '',\n    formaPagamento: '',\n  };\n\n  paciente: Paciente = {\n    idPaciente: undefined,\n    cpf: '',\n    nomePaciente: '',\n    dataNascimentoPaciente: new Date(),\n    idadePaciente: 0,\n    cidade: '',\n    estado: '',\n    telefone: ''\n  };\n\n  agenda: Agendamento = {\n    idAgendamento: 0, // ou 0, se preferir\n    paciente: new Paciente,\n    dataInicio: new Date(), // ou outra data padrão\n    descricao: '', // string vazia\n    horarioInicio: new Date(), // ou outra data padrão\n    horaFinal: new Date(), // ou outra data padrão\n    observacao: '',\n  }\n\n  constructor(private serviceConsulta: ServiceConsulta, private rotaAtiva: ActivatedRoute,\n    private rota: Router, private toastr: ToastrService, private pacienteService: ServicePaciente,\n    private serviceAgendamento: ServiceAgendamento) {\n\n  }\n\n  ngOnInit(): void {\n    this.rotaAtiva.params.subscribe(params => {\n      this.consulatId = +params['id'];\n    })\n    this.listarPacientes();\n    this.listarAgendamentos();\n    console.log(this.agendamentos)\n  }\n\n  listarPacientes() {\n    this.pacienteService.getPaciente().subscribe(pacientes => {\n      this.pacientes = pacientes;\n    });\n  }\n\n  listarAgendamentos() {\n    this.serviceAgendamento.getAgendamento().subscribe((agenda) => {\n      this.agendamentos = agenda;\n    });\n    console.log(this.agendamentos)\n  }\n\n  buscarDetalhesDoAgendamento(): void {\n    console.log(this.agendamentos)\n    if (this.selectedAgendamentoId) {\n      this.serviceAgendamento.getIdAgendamento(this.selectedAgendamentoId).subscribe((agendamento) => {\n        if (agendamento) {\n          this.agenda = agendamento;\n          if (agendamento.paciente && agendamento.paciente.cpf) {\n            this.buscarDetalhesDoPaciente(agendamento.paciente.cpf);\n          } else {\n            // Lide com a situação em que o paciente não está definido ou não possui um CPF\n          }\n        }\n      });\n    }\n  }\n\n  addConsulta(form: NgForm): void {\n    console.log(this.exibirMensagem)\n    console.log(this.consulta.idConsulta)\n    console.log(this.consulta)\n    if (form.valid) {\n      this.serviceConsulta.cadastrarConsulta(this.consulta).subscribe(response => {\n        this.sucessMessage = \"Consulta Cadastrado!\";\n        this.exibirMensagem = true;\n        console.log(response);\n        console.log(this.consulta);\n        console.log(this.exibirMensagem);\n        setTimeout(() => {\n          this.toastr.success(this.sucessMessage, 'Sucesso');\n          this.rota.navigate(['consultas']);\n        }, 2000)\n      });\n    }\n    else {\n      console.log()\n    }\n  }\n\n  buscarDetalhesDoPaciente(cpf: string): void {\n    console.log(this.pacienteService.getPacientePorCPF(cpf));\n    this.pacienteService.getPacientePorCPF(cpf).subscribe((paciente) => {\n      if (paciente) {\n        this.paciente.idPaciente = paciente.idPaciente;\n        this.paciente.cpf = paciente.cpf;\n        this.paciente.nomePaciente = paciente.nomePaciente;\n        this.paciente.dataNascimentoPaciente = paciente.dataNascimentoPaciente;\n        this.paciente.idadePaciente = paciente.idadePaciente;\n        this.paciente.cidade = paciente.cidade;\n        this.paciente.estado = paciente.estado;\n        this.paciente.telefone = paciente.telefone;\n        this.agenda.paciente = paciente\n\n        console.log(this.agenda)\n\n        this.selectedPatientId = cpf;\n        this.consulta.paciente = paciente; // Você pode atribuir diretamente o objeto paciente à agenda.\n      }\n    });\n  }\n\n  voltarPagina(): void {\n    this.rota.navigate(['consultas'])\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}