{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nlet CadastrarPacienteComponent = class CadastrarPacienteComponent {\n  ngOnInit() {}\n  constructor(servicePaciente, rota) {\n    this.servicePaciente = servicePaciente;\n    this.rota = rota;\n    this.cidades = [];\n    this.abreviacoes = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO'];\n    this.estadoSelecionado = '';\n    this.paciente = {\n      nomePaciente: '',\n      sobrenomePaciente: '',\n      dataNascimentoPaciente: new Date(),\n      idadePaciente: 0,\n      cidade: '',\n      estado: '',\n      statusPagamento: '',\n      tipoConsulta: '',\n      mesesAcompanhado: 0,\n      telefone: '',\n      quantiaPaga: 0,\n      formaPagamento: '',\n      valorConsulta: 0\n    };\n    this.camposPreenchidos = {};\n  }\n  addPaciente() {\n    console.log('Valor recebido para o campo nomePaciente:', this.paciente.nomePaciente);\n    console.log('Valor recebido para o campo sobrenomePaciente:', this.paciente.sobrenomePaciente);\n    console.log('Valor recebido para o campo dataPaciente:', this.paciente.dataNascimentoPaciente);\n    console.log('Valor recebido para o campo idadePaciente:', this.paciente.idadePaciente);\n    console.log('Valor recebido para o campo cidade:', this.paciente.cidade);\n    console.log('Valor recebido para o campo estado:', this.paciente.estado);\n    console.log('Valor recebido para o campo status:', this.paciente.statusPagamento);\n    console.log('Valor recebido para o campo tipoConsulta:', this.paciente.tipoConsulta);\n    console.log('Valor recebido para o campo mesesAcompanhado:', this.paciente.mesesAcompanhado);\n    console.log('Valor recebido para o campo telefone:', this.paciente.telefone);\n    console.log('Valor recebido para o campo quantiaPaga:', this.paciente.quantiaPaga);\n    console.log('Valor recebido para o campo formaPagamento:', this.paciente.formaPagamento);\n    console.log('Valor recebido para o campo valorConsulta:', this.paciente.valorConsulta);\n    this.servicePaciente.cadastrarPaciente(this.paciente).subscribe(response => {\n      console.log(response);\n      console.log(this.paciente);\n      this.rota.navigate(['/paciente']);\n    });\n  }\n  gerarIdade(date) {\n    dateNow: new Date();\n    dateInput: this.paciente.dataNascimentoPaciente;\n    age: date;\n  }\n  // atualizarStatus(event: Event): void {\n  //   const selectElement = event.target as HTMLSelectElement;\n  //   const escolhido = selectElement.value;\n  //   this.paciente.statusPag = escolhido;\n  // }\n  // atualizarTipoPagamento(valor: string): void {\n  //   if (valor) {\n  //     this.paciente.tipoPag = valor;\n  // }\n  // }\n  // atualizarQtdMes(event: Event): void {\n  //   const selectElement = event.target as HTMLSelectElement;\n  //   const escolhido = selectElement.value;\n  //   this.paciente.qtdaMesAcom = parseInt(escolhido);\n  // }\n  atualizarNomePaciente(event) {\n    this.paciente.nomePaciente = event.target.value;\n  }\n  atualizarsobrenomePaciente(event) {\n    this.paciente.sobrenomePaciente = event.target.value;\n  }\n  salvar(form) {\n    if (form.valid) {} else {\n      Object.keys(form.controls).forEach(controlName => {\n        const control = form.controls[controlName];\n        this.camposPreenchidos[controlName] = control.value !== '' || control.touched && control.invalid;\n      });\n    }\n  }\n};\n__decorate([ViewChild('pacienteForm')], CadastrarPacienteComponent.prototype, \"pacienteForm\", void 0);\nCadastrarPacienteComponent = __decorate([Component({\n  selector: 'app-cadastrar-paciente',\n  templateUrl: './cadastrar-paciente.component.html',\n  styleUrls: ['./cadastrar-paciente.component.scss']\n})], CadastrarPacienteComponent);\nexport { CadastrarPacienteComponent };","map":{"version":3,"names":["Component","ViewChild","CadastrarPacienteComponent","ngOnInit","constructor","servicePaciente","rota","cidades","abreviacoes","estadoSelecionado","paciente","nomePaciente","sobrenomePaciente","dataNascimentoPaciente","Date","idadePaciente","cidade","estado","statusPagamento","tipoConsulta","mesesAcompanhado","telefone","quantiaPaga","formaPagamento","valorConsulta","camposPreenchidos","addPaciente","console","log","cadastrarPaciente","subscribe","response","navigate","gerarIdade","date","dateNow","dateInput","age","atualizarNomePaciente","event","target","value","atualizarsobrenomePaciente","salvar","form","valid","Object","keys","controls","forEach","controlName","control","touched","invalid","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\welli\\front_pfmjg\\pfmjg\\src\\app\\module\\pages\\pacientes\\cadastrar-paciente\\cadastrar-paciente.component.ts"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\nimport { Paciente } from '../../../../models/paciente';\nimport { ServicePaciente } from 'src/app/services/service-paciente.service';\nimport { Router } from '@angular/router';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'app-cadastrar-paciente',\n  templateUrl: './cadastrar-paciente.component.html',\n  styleUrls: ['./cadastrar-paciente.component.scss']\n})\nexport class CadastrarPacienteComponent implements OnInit{\n\n  @ViewChild('pacienteForm') pacienteForm!: NgForm;\n\n  cidades: any[] = [];\n  abreviacoes: string[] = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB',\n  'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO'];\n\n  estadoSelecionado: string = '';\n\n  paciente: Paciente = {\n    nomePaciente: '',\n    sobrenomePaciente: '',\n    dataNascimentoPaciente: new Date(),\n    idadePaciente: 0,\n    cidade: '',\n    estado: '',\n    statusPagamento: '',\n    tipoConsulta: '',\n    mesesAcompanhado: 0, \n    telefone: '',\n    quantiaPaga: 0,\n    formaPagamento: '',\n    valorConsulta: 0,\n  };\n\n  ngOnInit() : void {\n  }\n\n  constructor(private servicePaciente: ServicePaciente, private rota: Router) {\n  }\n\n  addPaciente(): void {\n\n    console.log('Valor recebido para o campo nomePaciente:', this.paciente.nomePaciente);\n    console.log('Valor recebido para o campo sobrenomePaciente:', this.paciente.sobrenomePaciente);\n    console.log('Valor recebido para o campo dataPaciente:', this.paciente.dataNascimentoPaciente);\n    console.log('Valor recebido para o campo idadePaciente:', this.paciente.idadePaciente);\n    console.log('Valor recebido para o campo cidade:', this.paciente.cidade);\n    console.log('Valor recebido para o campo estado:', this.paciente.estado);\n    console.log('Valor recebido para o campo status:', this.paciente.statusPagamento);\n    console.log('Valor recebido para o campo tipoConsulta:', this.paciente.tipoConsulta);\n    console.log('Valor recebido para o campo mesesAcompanhado:', this.paciente.mesesAcompanhado);\n    console.log('Valor recebido para o campo telefone:', this.paciente.telefone);\n    console.log('Valor recebido para o campo quantiaPaga:', this.paciente.quantiaPaga);\n    console.log('Valor recebido para o campo formaPagamento:', this.paciente.formaPagamento);\n    console.log('Valor recebido para o campo valorConsulta:', this.paciente.valorConsulta);\n\n      this.servicePaciente.cadastrarPaciente(this.paciente).subscribe(response => \n    \n      {\n          \n        console.log(response);\n        console.log(this.paciente);\n        this.rota.navigate(['/paciente'])\n    \n      });\n\n\n  }\n\n  gerarIdade(date: Date) {\n    dateNow: new Date();\n    dateInput: this.paciente.dataNascimentoPaciente;\n\n    age: date\n  }\n\n  // atualizarStatus(event: Event): void {\n  //   const selectElement = event.target as HTMLSelectElement;\n  //   const escolhido = selectElement.value;\n  //   this.paciente.statusPag = escolhido;\n  // }\n\n  // atualizarTipoPagamento(valor: string): void {\n  //   if (valor) {\n  //     this.paciente.tipoPag = valor;\n  // }\n  // }\n\n  // atualizarQtdMes(event: Event): void {\n  //   const selectElement = event.target as HTMLSelectElement;\n  //   const escolhido = selectElement.value;\n  //   this.paciente.qtdaMesAcom = parseInt(escolhido);\n  // }\n\n  atualizarNomePaciente(event: Event) {\n    this.paciente.nomePaciente = (event.target as HTMLInputElement).value;\n  }\n\n  atualizarsobrenomePaciente(event: any) {\n    this.paciente.sobrenomePaciente = event.target.value;\n  }\n\n  camposPreenchidos: { [key: string]: boolean} = {};\n  \n  salvar(form: NgForm): void {\n    if (form.valid) {\n    } else {\n      Object.keys(form.controls).forEach(controlName => {\n        const control = form.controls[controlName];\n        this.camposPreenchidos[controlName] = control.value !== '' || (control.touched && control.invalid);\n      });\n    }\n  }\n  \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}