{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostListener, ViewChild } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nlet CadastrarPacienteComponent = class CadastrarPacienteComponent {\n  ngOnInit() {}\n  constructor(servicePaciente, rota, el, toastr) {\n    this.servicePaciente = servicePaciente;\n    this.rota = rota;\n    this.el = el;\n    this.toastr = toastr;\n    this.sucessMessage = \"\";\n    this.exibirMensagem = false;\n    this.regex = new FormControl();\n    this.controleRegex = new FormControl('', [Validators.pattern(/^[a-zA-Z0-9 ]*$/)]);\n    this.cidades = [];\n    this.abreviacoes = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO'];\n    this.estadoSelecionado = '';\n    this.paciente = {\n      nomePaciente: '',\n      sobrenomePaciente: '',\n      dataNascimentoPaciente: new Date(),\n      idadePaciente: 0,\n      cidade: '',\n      estado: '',\n      statusPagamento: '',\n      tipoConsulta: '',\n      mesesAcompanhado: 0,\n      telefone: '',\n      quantiaPaga: 0,\n      formaPagamento: '',\n      valorConsulta: 0\n    };\n    this.camposPreenchidos = {};\n  }\n  addPaciente(form) {\n    if (form.valid) {\n      this.servicePaciente.cadastrarPaciente(this.paciente).subscribe(response => {\n        this.sucessMessage = \"Paciente Cadastrado!\";\n        this.exibirMensagem = true;\n        console.log(response);\n        console.log(this.paciente);\n        setTimeout(() => {\n          this.toastr.success(this.sucessMessage, 'Sucesso');\n          this.rota.navigate(['pacientes']);\n        }, 2000);\n      });\n    }\n  }\n  exibrMensagem() {}\n  calcularIdade() {\n    if (this.paciente.dataNascimentoPaciente) {\n      const hoje = new Date();\n      const dataNascimento = new Date(this.paciente.dataNascimentoPaciente);\n      const diff = Math.abs(hoje.getTime() - dataNascimento.getTime());\n      this.paciente.idadePaciente = Math.floor(diff / (1000 * 60 * 60 * 24 * 365.25)); // Calcula a idade em anos considerando anos bissextos\n    }\n  }\n  // atualizarStatus(event: Event): void {\n  //   const selectElement = event.target as HTMLSelectElement;\n  //   const escolhido = selectElement.value;\n  //   this.paciente.statusPag = escolhido;\n  // }\n  // atualizarTipoPagamento(valor: string): void {\n  //   if (valor) {\n  //     this.paciente.tipoPag = valor;\n  // }\n  // }\n  // atualizarQtdMes(event: Event): void {\n  //   const selectElement = event.target as HTMLSelectElement;\n  //   const escolhido = selectElement.value;\n  //   this.paciente.qtdaMesAcom = parseInt(escolhido);\n  // }\n  atualizarNomePaciente(event) {\n    this.paciente.nomePaciente = event.target.value;\n  }\n  atualizarsobrenomePaciente(event) {\n    this.paciente.sobrenomePaciente = event.target.value;\n  }\n  salvar(form) {\n    if (form.valid) {} else {\n      Object.keys(form.controls).forEach(controlName => {\n        const control = form.controls[controlName];\n        this.camposPreenchidos[controlName] = control.value !== '' || control.touched && control.invalid;\n      });\n    }\n  }\n  formatarTelefone() {\n    if (this.paciente.telefone) {\n      const telefone = this.paciente.telefone;\n      const telefoneNumerico = telefone.replace(/\\D/g, '');\n      if (telefoneNumerico.length === 11) {\n        this.paciente.telefone = `(${telefoneNumerico.substring(0, 2)}) ${telefoneNumerico.substring(2, 7)}-${telefoneNumerico.substring(7)}`;\n      }\n    }\n  }\n  onInput() {\n    const input = this.el.nativeElement;\n    if (input.value < 0) {\n      input.value = '';\n    }\n  }\n};\n__decorate([ViewChild('pacienteForm')], CadastrarPacienteComponent.prototype, \"pacienteForm\", void 0);\n__decorate([HostListener('input')], CadastrarPacienteComponent.prototype, \"onInput\", null);\nCadastrarPacienteComponent = __decorate([Component({\n  selector: 'app-cadastrar-paciente',\n  templateUrl: './cadastrar-paciente.component.html',\n  styleUrls: ['./cadastrar-paciente.component.scss']\n})], CadastrarPacienteComponent);\nexport { CadastrarPacienteComponent };","map":{"version":3,"names":["Component","HostListener","ViewChild","FormControl","Validators","CadastrarPacienteComponent","ngOnInit","constructor","servicePaciente","rota","el","toastr","sucessMessage","exibirMensagem","regex","controleRegex","pattern","cidades","abreviacoes","estadoSelecionado","paciente","nomePaciente","sobrenomePaciente","dataNascimentoPaciente","Date","idadePaciente","cidade","estado","statusPagamento","tipoConsulta","mesesAcompanhado","telefone","quantiaPaga","formaPagamento","valorConsulta","camposPreenchidos","addPaciente","form","valid","cadastrarPaciente","subscribe","response","console","log","setTimeout","success","navigate","exibrMensagem","calcularIdade","hoje","dataNascimento","diff","Math","abs","getTime","floor","atualizarNomePaciente","event","target","value","atualizarsobrenomePaciente","salvar","Object","keys","controls","forEach","controlName","control","touched","invalid","formatarTelefone","telefoneNumerico","replace","length","substring","onInput","input","nativeElement","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\welli\\front_pfmjg\\pfmjg\\src\\app\\module\\pages\\pacientes\\cadastrar-paciente\\cadastrar-paciente.component.ts"],"sourcesContent":["import { Component, ElementRef, EventEmitter, HostListener, OnInit, Output, ViewChild } from '@angular/core';\nimport { Paciente } from '../../../../models/paciente';\nimport { ServicePaciente } from 'src/app/services/service-paciente.service';\nimport { Router } from '@angular/router';\nimport { FormControl, NgForm, Validators } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-cadastrar-paciente',\n  templateUrl: './cadastrar-paciente.component.html',\n  styleUrls: ['./cadastrar-paciente.component.scss']\n})\nexport class CadastrarPacienteComponent implements OnInit{\n\n  @ViewChild('pacienteForm') pacienteForm!: NgForm;\n\n  sucessMessage: string = \"\";\n\n  exibirMensagem: boolean = false;\n\n  regex = new FormControl();\n\n  controleRegex = new FormControl('', [Validators.pattern(/^[a-zA-Z0-9 ]*$/)])\n\n  cidades: any[] = [];\n  abreviacoes: string[] = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB',\n  'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO'];\n\n  estadoSelecionado: string = '';\n\n  paciente: Paciente = {\n    nomePaciente: '',\n    sobrenomePaciente: '',\n    dataNascimentoPaciente: new Date(),\n    idadePaciente: 0,\n    cidade: '',\n    estado: '',\n    statusPagamento: '',\n    tipoConsulta: '',\n    mesesAcompanhado: 0, \n    telefone: '',\n    quantiaPaga: 0,\n    formaPagamento: '',\n    valorConsulta: 0,\n  };\n\n  ngOnInit() : void {\n  }\n\n  constructor(private servicePaciente: ServicePaciente, private rota: Router, private el: ElementRef, private toastr: ToastrService) {\n  }\n\n  addPaciente(form: NgForm): void {\n\n   if (form.valid) {\n    this.servicePaciente.cadastrarPaciente(this.paciente).subscribe(response =>     \n    {\n      this.sucessMessage = \"Paciente Cadastrado!\";\n      this.exibirMensagem = true;\n      console.log(response);\n      console.log(this.paciente);\n      setTimeout(() => {\n        this.toastr.success(this.sucessMessage, 'Sucesso');\n        this.rota.navigate(['pacientes']);\n      }, 2000)\n    });\n    }\n  }\n\n  exibrMensagem(): void {\n  }\n\n  calcularIdade() {\n    if (this.paciente.dataNascimentoPaciente) {\n      const hoje = new Date();\n      const dataNascimento = new Date(this.paciente.dataNascimentoPaciente);\n      const diff = Math.abs(hoje.getTime() - dataNascimento.getTime());\n      this.paciente.idadePaciente = Math.floor(diff / (1000 * 60 * 60 * 24 * 365.25)); // Calcula a idade em anos considerando anos bissextos\n    }\n  }\n\n  // atualizarStatus(event: Event): void {\n  //   const selectElement = event.target as HTMLSelectElement;\n  //   const escolhido = selectElement.value;\n  //   this.paciente.statusPag = escolhido;\n  // }\n\n  // atualizarTipoPagamento(valor: string): void {\n  //   if (valor) {\n  //     this.paciente.tipoPag = valor;\n  // }\n  // }\n\n  // atualizarQtdMes(event: Event): void {\n  //   const selectElement = event.target as HTMLSelectElement;\n  //   const escolhido = selectElement.value;\n  //   this.paciente.qtdaMesAcom = parseInt(escolhido);\n  // }\n\n  atualizarNomePaciente(event: Event) {\n    this.paciente.nomePaciente = (event.target as HTMLInputElement).value;\n  }\n\n  atualizarsobrenomePaciente(event: any) {\n    this.paciente.sobrenomePaciente = event.target.value;\n  }\n\n  camposPreenchidos: { [key: string]: boolean} = {};\n  \n  salvar(form: NgForm): void {\n    if (form.valid) {\n    } else {\n      Object.keys(form.controls).forEach(controlName => {\n        const control = form.controls[controlName];\n        this.camposPreenchidos[controlName] = control.value !== '' || (control.touched && control.invalid);\n      });\n    }\n  }\n\n  formatarTelefone(): void {\n    if (this.paciente.telefone) {\n      const telefone = this.paciente.telefone;\n      const telefoneNumerico = telefone.replace(/\\D/g, '');\n      if (telefoneNumerico.length === 11) {\n        this.paciente.telefone = `(${telefoneNumerico.substring(0, 2)}) ${telefoneNumerico.substring(2, 7)}-${telefoneNumerico.substring(7)}`;\n      }\n    }\n  }\n\n  @HostListener('input')\n  onInput() {\n    const input = this.el.nativeElement;\n    if (input.value < 0) {\n      input.value = '';\n    }\n  }\n  \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}