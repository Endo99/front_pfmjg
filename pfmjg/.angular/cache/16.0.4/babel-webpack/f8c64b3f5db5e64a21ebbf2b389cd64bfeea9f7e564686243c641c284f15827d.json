{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { Categoria } from 'src/app/models/categoria/categoria';\nimport { Nutricionista } from 'src/app/models/nutricionista/nutricionista';\nimport { Paciente } from 'src/app/models/paciente';\nlet EditarNutrucionistaComponent = class EditarNutrucionistaComponent {\n  constructor(rotaAtiva, rota, toastr, pacienteService, nutricionistaService, categoriaService) {\n    this.rotaAtiva = rotaAtiva;\n    this.rota = rota;\n    this.toastr = toastr;\n    this.pacienteService = pacienteService;\n    this.nutricionistaService = nutricionistaService;\n    this.categoriaService = categoriaService;\n    this.isClick = false;\n    this.sucessMessage = \"\";\n    this.exibirMensagem = false;\n    this.pacienteInativo = true;\n    this.agendamentos = [];\n    this.formasDePagamento = [\"Dinheiro\", \"Cartão de Crédito\", \"Cartão de Débito\", \"PIX\"];\n    this.pacientes = [];\n    this.contas = [];\n    this.categorias = [];\n    this.consulatId = 0;\n    this.selectedProdutoOuCliente = '';\n    this.selectedAgendamentoId = 0;\n    this.selectedPatientId = '';\n    this.selectedControlId = 0;\n    this.tiposDeConsulta = ['Presencial', 'Online'];\n    this.nutricionista = {\n      id: 0,\n      nome: '',\n      cpf: '',\n      telefone: '',\n      situacao: '',\n      categoria: new Categoria(),\n      descricao: ''\n    };\n    this.categoria = {\n      idCategoria: 0,\n      descricao: '',\n      tipoCategoria: '',\n      controle: new Nutricionista()\n    };\n    this.paciente = {\n      idPaciente: undefined,\n      cpf: '',\n      nomePaciente: '',\n      dataNascimentoPaciente: new Date(),\n      idadePaciente: 0,\n      cidade: '',\n      estado: '',\n      telefone: ''\n    };\n    this.agenda = {\n      idAgendamento: 0,\n      paciente: new Paciente(),\n      dataInicio: new Date(),\n      descricao: '',\n      horarioInicio: '',\n      horaFinal: '',\n      observacao: ''\n    };\n    this.pages = [{\n      nome: \"Home\",\n      rota: \"\"\n    }, {\n      nome: \"Agenda\",\n      rota: \"/agendamentos\"\n    }, {\n      nome: \"Consulta\",\n      rota: \"/consultas\"\n    }, {\n      nome: \"Nutricionista\",\n      rota: \"\"\n    }, {\n      nome: \"Categoria\",\n      rota: \"/categorias\"\n    }, {\n      nome: \"Paciente\",\n      rota: \"/pacientes\"\n    }\n    // Adicione outras páginas conforme necessário\n    ];\n  }\n\n  ngOnInit() {\n    this.rotaAtiva.params.subscribe(params => {\n      const id = +params['id']; // Assuming 'id' is a route parameter in your Angular route\n      if (id) {\n        this.carregarControleParaEdicao(id);\n      }\n    });\n    this.listarPacientes();\n  }\n  direcionarPagina(pagina) {\n    // Encontre a página correspondente no array de páginas\n    const paginaEncontrada = this.pages.find(p => p.nome.toLowerCase() === pagina.toLowerCase());\n    if (paginaEncontrada) {\n      console.log(\"Entrou e clicou\");\n      // Redirecione para a rota correspondente\n      this.rota.navigate([paginaEncontrada.rota]);\n    }\n  }\n  clicarMenuBento() {\n    this.isClick = !this.isClick;\n  }\n  carregarControleParaEdicao(id) {\n    this.nutricionistaService.getIdControle(id).subscribe(controle => {\n      if (controle) {\n        console.log(controle);\n        this.nutricionista = controle;\n        console.log(this.nutricionista); // Populate nutricionista with the existing data\n      }\n    });\n  }\n\n  updControle(form) {\n    if (form.valid) {\n      const id = this.nutricionista?.id || 0; // Use 0 as a default value if it's undefined\n      this.nutricionistaService.editarNutricionista(id, this.nutricionista).subscribe(response => {\n        this.sucessMessage = \"Controle Atualizado!\";\n        this.exibirMensagem = true;\n        console.log(this.nutricionista);\n        setTimeout(() => {\n          this.toastr.success(this.sucessMessage, 'Sucesso');\n          this.rota.navigate(['controles']);\n        }, 2000);\n      });\n    } else {\n      console.log(\"Form is invalid.\");\n    }\n  }\n  listarPacientes() {\n    this.pacienteService.getPaciente().subscribe(pacientes => {\n      this.pacientes = pacientes;\n    });\n  }\n  listarCategorias() {\n    this.categoriaService.getCategoria().subscribe(categorias => {\n      this.categorias = categorias;\n    });\n  }\n  voltarPagina() {\n    this.rota.navigate(['controles']);\n  }\n};\n__decorate([ViewChild('controleForm')], EditarNutrucionistaComponent.prototype, \"controleForm\", void 0);\nEditarNutrucionistaComponent = __decorate([Component({\n  selector: 'app-editar-controle-caixa',\n  templateUrl: './editar-nutricionista.component.html',\n  styleUrls: ['./editar-nutricionista.component.scss']\n})], EditarNutrucionistaComponent);\nexport { EditarNutrucionistaComponent };","map":{"version":3,"names":["Component","ViewChild","Categoria","Nutricionista","Paciente","EditarNutrucionistaComponent","constructor","rotaAtiva","rota","toastr","pacienteService","nutricionistaService","categoriaService","isClick","sucessMessage","exibirMensagem","pacienteInativo","agendamentos","formasDePagamento","pacientes","contas","categorias","consulatId","selectedProdutoOuCliente","selectedAgendamentoId","selectedPatientId","selectedControlId","tiposDeConsulta","nutricionista","id","nome","cpf","telefone","situacao","categoria","descricao","idCategoria","tipoCategoria","controle","paciente","idPaciente","undefined","nomePaciente","dataNascimentoPaciente","Date","idadePaciente","cidade","estado","agenda","idAgendamento","dataInicio","horarioInicio","horaFinal","observacao","pages","ngOnInit","params","subscribe","carregarControleParaEdicao","listarPacientes","direcionarPagina","pagina","paginaEncontrada","find","p","toLowerCase","console","log","navigate","clicarMenuBento","getIdControle","updControle","form","valid","editarNutricionista","response","setTimeout","success","getPaciente","listarCategorias","getCategoria","voltarPagina","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\welli\\front_pfmjg\\pfmjg\\src\\app\\module\\pages\\nutricionista\\editar-nutricionista\\editar-nutricionista.component.ts"],"sourcesContent":["import { Component, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Agendamento } from 'src/app/models/agendamento/agendamento';\nimport { Categoria } from 'src/app/models/categoria/categoria';\nimport { Conta } from 'src/app/models/conta/conta';\nimport { Nutricionista } from 'src/app/models/nutricionista/nutricionista';\nimport { Paciente } from 'src/app/models/paciente';\nimport { NutricionistaService } from 'src/app/services/controle-caixa.service';\nimport { CategoriaService } from 'src/app/services/service-categoria.service';\nimport { ServicePaciente } from 'src/app/services/service-paciente.service';\n\n@Component({\n  selector: 'app-editar-controle-caixa',\n  templateUrl: './editar-nutricionista.component.html',\n  styleUrls: ['./editar-nutricionista.component.scss']\n})\nexport class EditarNutrucionistaComponent {\n  @ViewChild('controleForm') controleForm!: NgForm;\n\n  isClick: Boolean = false;\n\n  sucessMessage: string = \"\";\n\n  exibirMensagem: boolean = false;\n\n  pacienteInativo = true;\n\n  agendamentos: Agendamento[] = [];\n\n  formasDePagamento: string[] = [\"Dinheiro\", \"Cartão de Crédito\", \"Cartão de Débito\", \"PIX\"];\n\n  pacientes: Paciente[] = [];\n\n  contas: Conta[] = [];\n\n  categorias: Categoria[] = [];\n\n  consulatId: number = 0;\n\n  selectedProdutoOuCliente: string = '';\n\n  selectedAgendamentoId: number = 0;\n\n  selectedPatientId: string = '';\n\n  selectedControlId: number = 0;\n\n  tiposDeConsulta: string[] = ['Presencial', 'Online'];\n\n  nutricionista: Nutricionista = {\n    \n    id: 0,\n    nome: '',\n    cpf: '',\n    telefone: '',\n    situacao: '',\n    categoria: new Categoria(),\n    descricao: ''\n    \n  };\n\n  categoria: Categoria = {\n\n    idCategoria: 0,\n    descricao: '',\n    tipoCategoria: '',\n    controle: new Nutricionista\n\n  }\n\n  paciente: Paciente = {\n    idPaciente: undefined,\n    cpf: '',\n    nomePaciente: '',\n    dataNascimentoPaciente: new Date(),\n    idadePaciente: 0,\n    cidade: '',\n    estado: '',\n    telefone: ''\n  };\n\n  agenda: Agendamento = {\n    idAgendamento: 0, // ou 0, se preferir\n    paciente: new Paciente,\n    dataInicio: new Date(), // ou outra data padrão\n    descricao: '', // string vazia\n    horarioInicio: '', // ou outra data padrão\n    horaFinal: '',\n    observacao: '',\n  }\n\n  constructor(private rotaAtiva: ActivatedRoute, private rota: Router,\n    private toastr: ToastrService, private pacienteService: ServicePaciente,\n    private nutricionistaService: NutricionistaService, private categoriaService: CategoriaService ) {\n\n  }\n\n  ngOnInit(): void {\n    this.rotaAtiva.params.subscribe((params) => {\n      const id = +params['id']; // Assuming 'id' is a route parameter in your Angular route\n\n      if (id) {\n        this.carregarControleParaEdicao(id);\n      }\n    });\n    this.listarPacientes();\n  }\n\n  pages = [\n    { nome: \"Home\", rota: \"\" },\n    { nome: \"Agenda\", rota: \"/agendamentos\" },\n    { nome: \"Consulta\", rota: \"/consultas\" },\n    { nome: \"Nutricionista\", rota: \"\"},\n    { nome: \"Categoria\", rota: \"/categorias\"},\n    { nome: \"Paciente\", rota: \"/pacientes\"},\n    // Adicione outras páginas conforme necessário\n  ];\n\n\n  direcionarPagina(pagina: string) {\n    // Encontre a página correspondente no array de páginas\n    const paginaEncontrada = this.pages.find(p => p.nome.toLowerCase() === pagina.toLowerCase());\n\n    if (paginaEncontrada) {\n      console.log(\"Entrou e clicou\");\n      // Redirecione para a rota correspondente\n      this.rota.navigate([paginaEncontrada.rota]);\n    }\n  }\n\n  clicarMenuBento() {\n    this.isClick = !this.isClick;\n  }\n\n  carregarControleParaEdicao(id: number): void {\n    this.nutricionistaService.getIdControle(id).subscribe((controle) => {\n      if (controle) {\n        console.log(controle)\n        this.nutricionista = controle;\n        console.log(this.nutricionista) // Populate nutricionista with the existing data\n      }\n    });\n  }\n\n\n  updControle(form: NgForm) {\n    if (form.valid) {\n      const id = this.nutricionista?.id || 0; // Use 0 as a default value if it's undefined\n      this.nutricionistaService.editarNutricionista(id, this.nutricionista).subscribe(response => {\n        this.sucessMessage = \"Controle Atualizado!\";\n        this.exibirMensagem = true;\n        console.log(this.nutricionista);\n  \n        setTimeout(() => {\n          this.toastr.success(this.sucessMessage, 'Sucesso');\n          this.rota.navigate(['controles']);\n        }, 2000);\n      });\n    } else {\n      console.log(\"Form is invalid.\");\n    }\n  }\n\n  listarPacientes() {\n    this.pacienteService.getPaciente().subscribe(pacientes => {\n      this.pacientes = pacientes;\n    });\n  }\n\n  listarCategorias() {\n    this.categoriaService.getCategoria().subscribe(categorias => {\n      this.categorias = categorias;\n    });\n  }\n\n  voltarPagina(): void {\n    this.rota.navigate(['controles'])\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}