{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nlet CadastrarPacienteComponent = class CadastrarPacienteComponent {\n  ngOnInit() {}\n  constructor(servicePaciente, rota) {\n    this.servicePaciente = servicePaciente;\n    this.rota = rota;\n    this.regex = new FormControl();\n    this.controleRegex = new FormControl('', [Validators.pattern(/^[a-zA-Z0-9 ]*$/)]);\n    this.cidades = [];\n    this.abreviacoes = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO'];\n    this.estadoSelecionado = '';\n    this.paciente = {\n      nomePaciente: '',\n      sobrenomePaciente: '',\n      dataNascimentoPaciente: new Date(),\n      idadePaciente: 0,\n      cidade: '',\n      estado: '',\n      statusPagamento: '',\n      tipoConsulta: '',\n      mesesAcompanhado: 0,\n      telefone: '',\n      quantiaPaga: 0,\n      formaPagamento: '',\n      valorConsulta: 0\n    };\n    this.camposPreenchidos = {};\n  }\n  addPaciente(form) {\n    if (form.valid) {\n      this.servicePaciente.cadastrarPaciente(this.paciente).subscribe(response => {\n        console.log(response);\n        console.log(this.paciente);\n        this.rota.navigate(['/paciente']);\n      });\n    }\n  }\n  calcularIdade() {\n    if (this.paciente.dataNascimentoPaciente) {\n      const hoje = new Date();\n      const dataNascimento = new Date(this.paciente.dataNascimentoPaciente);\n      const diff = Math.abs(hoje.getTime() - dataNascimento.getTime());\n      this.paciente.idadePaciente = Math.floor(diff / (1000 * 60 * 60 * 24 * 365.25)); // Calcula a idade em anos considerando anos bissextos\n    }\n  }\n  // atualizarStatus(event: Event): void {\n  //   const selectElement = event.target as HTMLSelectElement;\n  //   const escolhido = selectElement.value;\n  //   this.paciente.statusPag = escolhido;\n  // }\n  // atualizarTipoPagamento(valor: string): void {\n  //   if (valor) {\n  //     this.paciente.tipoPag = valor;\n  // }\n  // }\n  // atualizarQtdMes(event: Event): void {\n  //   const selectElement = event.target as HTMLSelectElement;\n  //   const escolhido = selectElement.value;\n  //   this.paciente.qtdaMesAcom = parseInt(escolhido);\n  // }\n  atualizarNomePaciente(event) {\n    this.paciente.nomePaciente = event.target.value;\n  }\n  atualizarsobrenomePaciente(event) {\n    this.paciente.sobrenomePaciente = event.target.value;\n  }\n  salvar(form) {\n    if (form.valid) {} else {\n      Object.keys(form.controls).forEach(controlName => {\n        const control = form.controls[controlName];\n        this.camposPreenchidos[controlName] = control.value !== '' || control.touched && control.invalid;\n      });\n    }\n  }\n  formatarTelefone(telefone) {\n    if (!telefone) {\n      return '';\n    }\n    const numeroLimpo = telefone.replace(/\\D/g, ''); // Remove caracteres não numéricos\n    const match = numeroLimpo.match(/^(\\d{2})(\\d{4,5})(\\d{4})$/); // Separa o número em grupos: DD, XXXX ou XXXXX, XXXX\n    if (match) {\n      return `(${match[1]}) ${match[2]}-${match[3]}`; // Formata no padrão (DD) XXXX-XXXX ou (DD) XXXXX-XXXX\n    }\n\n    return telefone; // Retorna o número original caso não seja possível formatar\n  }\n};\n\n__decorate([ViewChild('pacienteForm')], CadastrarPacienteComponent.prototype, \"pacienteForm\", void 0);\nCadastrarPacienteComponent = __decorate([Component({\n  selector: 'app-cadastrar-paciente',\n  templateUrl: './cadastrar-paciente.component.html',\n  styleUrls: ['./cadastrar-paciente.component.scss']\n})], CadastrarPacienteComponent);\nexport { CadastrarPacienteComponent };","map":{"version":3,"names":["Component","ViewChild","FormControl","Validators","CadastrarPacienteComponent","ngOnInit","constructor","servicePaciente","rota","regex","controleRegex","pattern","cidades","abreviacoes","estadoSelecionado","paciente","nomePaciente","sobrenomePaciente","dataNascimentoPaciente","Date","idadePaciente","cidade","estado","statusPagamento","tipoConsulta","mesesAcompanhado","telefone","quantiaPaga","formaPagamento","valorConsulta","camposPreenchidos","addPaciente","form","valid","cadastrarPaciente","subscribe","response","console","log","navigate","calcularIdade","hoje","dataNascimento","diff","Math","abs","getTime","floor","atualizarNomePaciente","event","target","value","atualizarsobrenomePaciente","salvar","Object","keys","controls","forEach","controlName","control","touched","invalid","formatarTelefone","numeroLimpo","replace","match","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\welli\\front_pfmjg\\pfmjg\\src\\app\\module\\pages\\pacientes\\cadastrar-paciente\\cadastrar-paciente.component.ts"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core';\nimport { Paciente } from '../../../../models/paciente';\nimport { ServicePaciente } from 'src/app/services/service-paciente.service';\nimport { Router } from '@angular/router';\nimport { FormControl, NgForm, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-cadastrar-paciente',\n  templateUrl: './cadastrar-paciente.component.html',\n  styleUrls: ['./cadastrar-paciente.component.scss']\n})\nexport class CadastrarPacienteComponent implements OnInit{\n\n  @ViewChild('pacienteForm') pacienteForm!: NgForm;\n\n  regex = new FormControl();\n\n  controleRegex = new FormControl('', [Validators.pattern(/^[a-zA-Z0-9 ]*$/)])\n\n  cidades: any[] = [];\n  abreviacoes: string[] = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB',\n  'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO'];\n\n  estadoSelecionado: string = '';\n\n  paciente: Paciente = {\n    nomePaciente: '',\n    sobrenomePaciente: '',\n    dataNascimentoPaciente: new Date(),\n    idadePaciente: 0,\n    cidade: '',\n    estado: '',\n    statusPagamento: '',\n    tipoConsulta: '',\n    mesesAcompanhado: 0, \n    telefone: '',\n    quantiaPaga: 0,\n    formaPagamento: '',\n    valorConsulta: 0,\n  };\n\n  ngOnInit() : void {\n  }\n\n  constructor(private servicePaciente: ServicePaciente, private rota: Router) {\n  }\n\n  addPaciente(form: NgForm): void {\n\n   if (form.valid) {\n        this.servicePaciente.cadastrarPaciente(this.paciente).subscribe(response =>     \n        {\n          console.log(response);\n          console.log(this.paciente);\n          this.rota.navigate(['/paciente'])\n      });\n    }\n  }\n\n  calcularIdade() {\n    if (this.paciente.dataNascimentoPaciente) {\n      const hoje = new Date();\n      const dataNascimento = new Date(this.paciente.dataNascimentoPaciente);\n      const diff = Math.abs(hoje.getTime() - dataNascimento.getTime());\n      this.paciente.idadePaciente = Math.floor(diff / (1000 * 60 * 60 * 24 * 365.25)); // Calcula a idade em anos considerando anos bissextos\n    }\n  }\n\n  // atualizarStatus(event: Event): void {\n  //   const selectElement = event.target as HTMLSelectElement;\n  //   const escolhido = selectElement.value;\n  //   this.paciente.statusPag = escolhido;\n  // }\n\n  // atualizarTipoPagamento(valor: string): void {\n  //   if (valor) {\n  //     this.paciente.tipoPag = valor;\n  // }\n  // }\n\n  // atualizarQtdMes(event: Event): void {\n  //   const selectElement = event.target as HTMLSelectElement;\n  //   const escolhido = selectElement.value;\n  //   this.paciente.qtdaMesAcom = parseInt(escolhido);\n  // }\n\n  atualizarNomePaciente(event: Event) {\n    this.paciente.nomePaciente = (event.target as HTMLInputElement).value;\n  }\n\n  atualizarsobrenomePaciente(event: any) {\n    this.paciente.sobrenomePaciente = event.target.value;\n  }\n\n  camposPreenchidos: { [key: string]: boolean} = {};\n  \n  salvar(form: NgForm): void {\n    if (form.valid) {\n    } else {\n      Object.keys(form.controls).forEach(controlName => {\n        const control = form.controls[controlName];\n        this.camposPreenchidos[controlName] = control.value !== '' || (control.touched && control.invalid);\n      });\n    }\n  }\n\n  formatarTelefone(telefone: string): string {\n    if (!telefone) {\n      return '';\n    }\n\n    const numeroLimpo = telefone.replace(/\\D/g, ''); // Remove caracteres não numéricos\n    const match = numeroLimpo.match(/^(\\d{2})(\\d{4,5})(\\d{4})$/); // Separa o número em grupos: DD, XXXX ou XXXXX, XXXX\n\n    if (match) {\n      return `(${match[1]}) ${match[2]}-${match[3]}`; // Formata no padrão (DD) XXXX-XXXX ou (DD) XXXXX-XXXX\n    }\n\n    return telefone; // Retorna o número original caso não seja possível formatar\n  }\n  \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}