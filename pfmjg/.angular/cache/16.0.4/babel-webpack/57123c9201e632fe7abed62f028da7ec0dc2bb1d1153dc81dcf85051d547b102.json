{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/service-categoria.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-toastr\";\nconst _c0 = [\"categoriaForm\"];\nclass EditarCategoriaComponent {\n  constructor(serviceCategoria, rotaAtiva, rota, el, toastr) {\n    this.serviceCategoria = serviceCategoria;\n    this.rotaAtiva = rotaAtiva;\n    this.rota = rota;\n    this.el = el;\n    this.toastr = toastr;\n    this.sucessMessage = \"\";\n    this.exibirMensagem = false;\n    this.cpfValido = false;\n    this.categoriaId = 0;\n    this.categoria = {\n      idCategoria: 0,\n      descricao: '',\n      tipoCategoria: ''\n    };\n  }\n  ngOnInit() {\n    this.rotaAtiva.params.subscribe(params => {\n      this.categoriaId = +params['id'];\n      console.log('ID do Paciente:', this.categoriaId);\n      this.carregarDetalhesPaciente();\n    });\n  }\n  updCategoria(form) {\n    const idCategoria = this.categoria.idCategoria;\n    console.log(form.value);\n    // Verifique se o objeto paciente está definido e se o formulário é válido\n    if (this.categoria && this.categoriaForm.valid && idCategoria !== undefined) {\n      // Preencha os valores do objeto paciente com os valores do formulário\n      this.categoria.descricao = this.categoriaForm.value.descricao;\n      this.categoria.tipoCategoria = this.categoriaForm.value.tipoCategoria;\n      this.serviceCategoria.atualizarCategoria(idCategoria, this.categoria).subscribe(() => {\n        this.sucessMessage = \"Categoria Atualizada!\";\n        this.exibirMensagem = true;\n        setTimeout(() => {\n          this.toastr.success(this.sucessMessage, 'Sucesso');\n          this.rota.navigate(['categorias']);\n        }, 2000);\n      });\n    } else {\n      console.log('Categoria não definido ou formulário inválido');\n    }\n  }\n  carregarDetalhesPaciente() {\n    this.serviceCategoria.getIdCategoria(this.categoriaId).subscribe(categoria => {\n      this.categoria = categoria;\n    }, error => {\n      console.log('Erro ao obter os dados da categoria:', error);\n    });\n  }\n  voltarPagina() {\n    this.rota.navigate(['categorias']);\n  }\n  onInput() {\n    const input = this.el.nativeElement;\n    if (input.value < 0) {\n      input.value = '';\n    }\n  }\n}\nEditarCategoriaComponent.ɵfac = function EditarCategoriaComponent_Factory(t) {\n  return new (t || EditarCategoriaComponent)(i0.ɵɵdirectiveInject(i1.CategoriaService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.ToastrService));\n};\nEditarCategoriaComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EditarCategoriaComponent,\n  selectors: [[\"app-editar-categoria\"]],\n  viewQuery: function EditarCategoriaComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.categoriaForm = _t.first);\n    }\n  },\n  hostBindings: function EditarCategoriaComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"input\", function EditarCategoriaComponent_input_HostBindingHandler() {\n        return ctx.onInput();\n      });\n    }\n  },\n  decls: 0,\n  vars: 0,\n  template: function EditarCategoriaComponent_Template(rf, ctx) {},\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { EditarCategoriaComponent };","map":{"version":3,"names":["EditarCategoriaComponent","constructor","serviceCategoria","rotaAtiva","rota","el","toastr","sucessMessage","exibirMensagem","cpfValido","categoriaId","categoria","idCategoria","descricao","tipoCategoria","ngOnInit","params","subscribe","console","log","carregarDetalhesPaciente","updCategoria","form","value","categoriaForm","valid","undefined","atualizarCategoria","setTimeout","success","navigate","getIdCategoria","error","voltarPagina","onInput","input","nativeElement","i0","ɵɵdirectiveInject","i1","CategoriaService","i2","ActivatedRoute","Router","ElementRef","i3","ToastrService","selectors","viewQuery","EditarCategoriaComponent_Query","rf","ctx"],"sources":["C:\\Users\\welli\\front_pfmjg\\pfmjg\\src\\app\\module\\pages\\categoria\\editar-categoria\\editar-categoria.component.ts"],"sourcesContent":["import { Component, ElementRef, EventEmitter, HostListener, Input, Output, ViewChild } from '@angular/core';\nimport { FormControl, NgForm, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Categoria } from 'src/app/models/categoria/categoria';\nimport { CategoriaService } from 'src/app/services/service-categoria.service';\n\n@Component({\n  selector: 'app-editar-categoria',\n  templateUrl: './editar-categoria.component.html',\n  styleUrls: ['./editar-categoria.component.scss']\n})\nexport class EditarCategoriaComponent {\n  @ViewChild('categoriaForm') categoriaForm!: NgForm;\n\n  sucessMessage: string = \"\";\n\n  exibirMensagem: boolean = false;\n\n  cpfValido: boolean = false;\n\n\n  categoriaId: number = 0;\n\n  categoria: Categoria = {\n    idCategoria: 0,\n    descricao: '',\n    tipoCategoria: '',\n  };\n  \n  constructor(private serviceCategoria: CategoriaService, private rotaAtiva: ActivatedRoute,\n    private rota: Router, private el: ElementRef, private toastr: ToastrService) {\n\n  }\n\n  ngOnInit() : void {\n    this.rotaAtiva.params.subscribe(params => {\n      this.categoriaId = +params['id'];\n      console.log('ID do Paciente:', this.categoriaId);\n      this.carregarDetalhesPaciente();\n    })\n  }\n  \n\n  updCategoria(form: NgForm): void {\n    const idCategoria = this.categoria.idCategoria;\n    console.log(form.value)\n    // Verifique se o objeto paciente está definido e se o formulário é válido\n    if (this.categoria && this.categoriaForm.valid && idCategoria !== undefined) {\n      // Preencha os valores do objeto paciente com os valores do formulário\n\n      this.categoria.descricao = this.categoriaForm.value.descricao as string;\n      this.categoria.tipoCategoria = this.categoriaForm.value.tipoCategoria as string;\n  \n      this.serviceCategoria.atualizarCategoria(idCategoria, this.categoria).subscribe(() => {\n        this.sucessMessage = \"Categoria Atualizada!\";\n        this.exibirMensagem = true;\n        setTimeout(() => {\n          this.toastr.success(this.sucessMessage, 'Sucesso');\n          this.rota.navigate(['categorias']);\n        }, 2000)\n\n      });\n      \n    } else {\n      console.log('Categoria não definido ou formulário inválido');\n    }\n  }\n  \n  \n    carregarDetalhesPaciente() {\n      this.serviceCategoria.getIdCategoria(this.categoriaId).subscribe(\n        categoria => {\n          this.categoria = categoria;\n\n        },\n        error => {\n          console.log('Erro ao obter os dados da categoria:', error);\n        }\n      );\n  }\n\n  voltarPagina(): void {\n    this.rota.navigate(['categorias'])\n  }\n\n@HostListener('input')\nonInput() {\n  const input = this.el.nativeElement;\n  if (input.value < 0) {\n    input.value = '';\n  }\n}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}