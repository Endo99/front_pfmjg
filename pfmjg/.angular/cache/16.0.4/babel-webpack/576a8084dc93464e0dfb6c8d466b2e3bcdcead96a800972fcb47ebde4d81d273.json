{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, HostListener, ViewChild } from '@angular/core';\nlet EditarCategoriaComponent = class EditarCategoriaComponent {\n  constructor(serviceCategoria, rotaAtiva, rota, el, toastr) {\n    this.serviceCategoria = serviceCategoria;\n    this.rotaAtiva = rotaAtiva;\n    this.rota = rota;\n    this.el = el;\n    this.toastr = toastr;\n    this.sucessMessage = \"\";\n    this.exibirMensagem = false;\n    this.cpfValido = false;\n    this.isClick = false;\n    this.categoriaId = 0;\n    this.categoria = {\n      idCategoria: 0,\n      descricao: '',\n      tipoCategoria: ''\n    };\n    this.pages = [{\n      nome: \"Home\",\n      rota: \"\"\n    }, {\n      nome: \"Agenda\",\n      rota: \"/agendamentos\"\n    }, {\n      nome: \"Consulta\",\n      rota: \"/consultas\"\n    }, {\n      nome: \"Nutricionista\",\n      rota: \"/nutricionistas\"\n    }, {\n      nome: \"Categoria\",\n      rota: \"/categorias\"\n    }, {\n      nome: \"Paciente\",\n      rota: \"/pacientes\"\n    }\n    // Adicione outras páginas conforme necessário\n    ];\n  }\n\n  ngOnInit() {\n    this.rotaAtiva.params.subscribe(params => {\n      this.categoriaId = +params['id'];\n      console.log('ID do Paciente:', this.categoriaId);\n      this.carregarDetalhesPaciente();\n    });\n  }\n  direcionarPagina(pagina) {\n    // Encontre a página correspondente no array de páginas\n    const paginaEncontrada = this.pages.find(p => p.nome.toLowerCase() === pagina.toLowerCase());\n    if (paginaEncontrada) {\n      console.log(\"Entrou e clicou\");\n      // Redirecione para a rota correspondente\n      this.rota.navigate([paginaEncontrada.rota]);\n    }\n  }\n  clicarMenuBento() {\n    this.isClick = !this.isClick;\n  }\n  updCategoria(form) {\n    const idCategoria = this.categoria.idCategoria;\n    console.log(form.value);\n    // Verifique se o objeto paciente está definido e se o formulário é válido\n    if (this.categoria && this.categoriaForm.valid && idCategoria !== undefined) {\n      // Preencha os valores do objeto paciente com os valores do formulário\n      this.categoria.descricao = this.categoriaForm.value.descricao;\n      this.categoria.tipoCategoria = this.categoriaForm.value.tipoCategoria;\n      this.serviceCategoria.atualizarCategoria(idCategoria, this.categoria).subscribe(() => {\n        this.sucessMessage = \"Categoria Atualizada!\";\n        this.exibirMensagem = true;\n        setTimeout(() => {\n          this.toastr.success(this.sucessMessage, 'Sucesso');\n          this.rota.navigate(['categorias']);\n        }, 2000);\n      });\n    } else {\n      console.log('Categoria não definido ou formulário inválido');\n    }\n  }\n  carregarDetalhesPaciente() {\n    this.serviceCategoria.getIdCategoria(this.categoriaId).subscribe(categoria => {\n      this.categoria = categoria;\n    }, error => {\n      console.log('Erro ao obter os dados da categoria:', error);\n    });\n  }\n  voltarPagina() {\n    this.rota.navigate(['categorias']);\n  }\n  onInput() {\n    const input = this.el.nativeElement;\n    if (input.value < 0) {\n      input.value = '';\n    }\n  }\n};\n__decorate([ViewChild('categoriaForm')], EditarCategoriaComponent.prototype, \"categoriaForm\", void 0);\n__decorate([HostListener('input')], EditarCategoriaComponent.prototype, \"onInput\", null);\nEditarCategoriaComponent = __decorate([Component({\n  selector: 'app-editar-categoria',\n  templateUrl: './editar-categoria.component.html',\n  styleUrls: ['./editar-categoria.component.scss']\n})], EditarCategoriaComponent);\nexport { EditarCategoriaComponent };","map":{"version":3,"names":["Component","HostListener","ViewChild","EditarCategoriaComponent","constructor","serviceCategoria","rotaAtiva","rota","el","toastr","sucessMessage","exibirMensagem","cpfValido","isClick","categoriaId","categoria","idCategoria","descricao","tipoCategoria","pages","nome","ngOnInit","params","subscribe","console","log","carregarDetalhesPaciente","direcionarPagina","pagina","paginaEncontrada","find","p","toLowerCase","navigate","clicarMenuBento","updCategoria","form","value","categoriaForm","valid","undefined","atualizarCategoria","setTimeout","success","getIdCategoria","error","voltarPagina","onInput","input","nativeElement","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\welli\\front_pfmjg\\pfmjg\\src\\app\\module\\pages\\categoria\\editar-categoria\\editar-categoria.component.ts"],"sourcesContent":["import { Component, ElementRef, EventEmitter, HostListener, Input, Output, ViewChild } from '@angular/core';\nimport { FormControl, NgForm, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Categoria } from 'src/app/models/categoria/categoria';\nimport { CategoriaService } from 'src/app/services/service-categoria.service';\n\n@Component({\n  selector: 'app-editar-categoria',\n  templateUrl: './editar-categoria.component.html',\n  styleUrls: ['./editar-categoria.component.scss']\n})\nexport class EditarCategoriaComponent {\n  @ViewChild('categoriaForm') categoriaForm!: NgForm;\n\n  sucessMessage: string = \"\";\n\n  exibirMensagem: boolean = false;\n\n  cpfValido: boolean = false;\n\n  isClick: Boolean = false;\n\n  categoriaId: number = 0;\n\n  categoria: Categoria = {\n    idCategoria: 0,\n    descricao: '',\n    tipoCategoria: '',\n  };\n  \n  constructor(private serviceCategoria: CategoriaService, private rotaAtiva: ActivatedRoute,\n    private rota: Router, private el: ElementRef, private toastr: ToastrService) {\n\n  }\n\n  ngOnInit() : void {\n    this.rotaAtiva.params.subscribe(params => {\n      this.categoriaId = +params['id'];\n      console.log('ID do Paciente:', this.categoriaId);\n      this.carregarDetalhesPaciente();\n    })\n  }\n  \n  pages = [\n    { nome: \"Home\", rota: \"\" },\n    { nome: \"Agenda\", rota: \"/agendamentos\" },\n    { nome: \"Consulta\", rota: \"/consultas\" },\n    { nome: \"Nutricionista\", rota: \"/nutricionistas\"},\n    { nome: \"Categoria\", rota: \"/categorias\"},\n    { nome: \"Paciente\", rota: \"/pacientes\"},\n    // Adicione outras páginas conforme necessário\n  ];\n\n\n  direcionarPagina(pagina: string) {\n    // Encontre a página correspondente no array de páginas\n    const paginaEncontrada = this.pages.find(p => p.nome.toLowerCase() === pagina.toLowerCase());\n\n    if (paginaEncontrada) {\n      console.log(\"Entrou e clicou\");\n      // Redirecione para a rota correspondente\n      this.rota.navigate([paginaEncontrada.rota]);\n    }\n  }\n\n  clicarMenuBento() {\n    this.isClick = !this.isClick;\n  }\n\n  updCategoria(form: NgForm): void {\n    const idCategoria = this.categoria.idCategoria;\n    console.log(form.value)\n    // Verifique se o objeto paciente está definido e se o formulário é válido\n    if (this.categoria && this.categoriaForm.valid && idCategoria !== undefined) {\n      // Preencha os valores do objeto paciente com os valores do formulário\n\n      this.categoria.descricao = this.categoriaForm.value.descricao as string;\n      this.categoria.tipoCategoria = this.categoriaForm.value.tipoCategoria as string;\n  \n      this.serviceCategoria.atualizarCategoria(idCategoria, this.categoria).subscribe(() => {\n        this.sucessMessage = \"Categoria Atualizada!\";\n        this.exibirMensagem = true;\n        setTimeout(() => {\n          this.toastr.success(this.sucessMessage, 'Sucesso');\n          this.rota.navigate(['categorias']);\n        }, 2000)\n\n      });\n      \n    } else {\n      console.log('Categoria não definido ou formulário inválido');\n    }\n  }\n  \n  \n    carregarDetalhesPaciente() {\n      this.serviceCategoria.getIdCategoria(this.categoriaId).subscribe(\n        categoria => {\n          this.categoria = categoria;\n\n        },\n        error => {\n          console.log('Erro ao obter os dados da categoria:', error);\n        }\n      );\n  }\n\n  voltarPagina(): void {\n    this.rota.navigate(['categorias'])\n  }\n\n@HostListener('input')\nonInput() {\n  const input = this.el.nativeElement;\n  if (input.value < 0) {\n    input.value = '';\n  }\n}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}